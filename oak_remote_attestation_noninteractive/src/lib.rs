//
// Copyright 2022 The Project Oak Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#![no_std]

extern crate alloc;

use alloc::vec::Vec;

// pub mod proto {
//     #![allow(clippy::return_self_not_must_use)]
//     tonic::include_proto!("oak.session.noninteractive.v1");
// }

// pub mod schema {
//     #![allow(dead_code)]
//     include!(concat!(env!("OUT_DIR"), "/oak.crypto.rs"));
// }

/// Attestation evidence used to verify the validity of the Trusted Execution Environment and the
/// binary running on it.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-evidence>
pub struct AttestationEvidence {
    pub attestation_report: Vec<u8>,
}

/// Reference values used by the verifier to appraise the attestation evidence.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-reference-values>
pub struct ReferenceValue {
    pub binary_hash: Vec<u8>,
    pub attested_data: Vec<u8>,
}

/// A trait implementing the functionality of an attester that generates an attestation evidence.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-attester>
pub trait Attester: Clone + Send + Sync {
    /// Generate an attestation evidence containing a remote attestation report and ensuring that
    /// `attested_data` is cryptographically bound to the result (e.g. via a signature).
    ///
    /// That is usually verified by [`AttestationVerifier::verify_attestation`].
    fn generate_attestation_evidence(
        &self,
        attested_data: &[u8],
    ) -> anyhow::Result<AttestationEvidence>;
}

/// An instance of [`Attester`] that always returns an empty attestation.
///
/// Useful when no attestation report is expected to be genereated by the current side of a remotely
/// attested connection.
#[derive(Clone)]
pub struct EmptyAttester;

impl Attester for EmptyAttester {
    fn generate_attestation_evidence(
        &self,
        _attested_data: &[u8],
    ) -> anyhow::Result<AttestationEvidence> {
        Ok(AttestationEvidence {
            attestation_report: Vec::new(),
        })
    }
}

/// A trait implementing the functionality of a verifier that appraises the attestation evidence and
/// produces an attestation result.
/// <https://www.rfc-editor.org/rfc/rfc9334.html#name-verifier>
pub trait AttestationVerifier: Clone + Send + Sync {
    /// Verify the provided remote attestation report, checking that `expected_attested_data` is
    /// cryptographically bound to it (e.g. via a signature).
    ///
    /// That is usually generated by [`AttestationGenerator::generate_attestation`].
    fn verify_attestation(
        &self,
        evidence: &AttestationEvidence,
        reference_value: &ReferenceValue,
    ) -> anyhow::Result<()>;
}

/// An instance of [`AttestationVerifier`] that succeeds iff the provided attestation is empty.
///
/// Useful when no attestation is expected to be genereated by the other side of a remotely
/// attested connection.
#[derive(Clone)]
pub struct EmptyAttestationVerifier;

impl AttestationVerifier for EmptyAttestationVerifier {
    fn verify_attestation(
        &self,
        evidence: &AttestationEvidence,
        _reference_value: &ReferenceValue,
    ) -> anyhow::Result<()> {
        // We check that the attestation report is empty in order to avoid accidentally ignoring a
        // real attestation from the other side, although in principle a more lenient
        // implementation of this struct could be used that always ignores also non-empty
        // attestations.
        if evidence.attestation_report.is_empty() {
            Ok(())
        } else {
            Err(anyhow::anyhow!(
                "expected empty attestation report, got {:?}",
                evidence.attestation_report
            ))
        }
    }
}
